logging:
  level:
    root: INFO
    io.openleap: DEBUG
spring:
  mvc:
  security:
    oauth2:
      client:
        provider:
          openleap:
            issuer-uri: http://auth-server:8899
            token-uri: http://auth-server:8899/oauth2/token
      resourceserver:
        jwt:
          jwk-set-uri: http://auth-server:8899/oauth2/jwks
oleap:
  eureka:
    url: ${oleap.srv.protocol}://${oleap.srv.user.name}:${oleap.srv.user.password}@${oleap.srv.hostname}:${oleap.srv.port}
    zone: ${oleap.eureka.url}/eureka/
  srv:
    protocol: http
    hostname: localhost
    port: 8761
    user:
      name: user
      password: sa
eureka:
  client:
    instance-info-replication-interval-seconds: 10 # default is 30
    registryFetchIntervalSeconds: 5 # SBA
    service-url:
      defaultZone: ${oleap.eureka.zone} # Must be camelCase
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    health-check-url-path: /actuator/health
    hostname: ${oleap.srv.hostname}
    # Request a lease with a validity of 5 seconds. If until then the
    # lease has not been renewed, it expires and the Eureka server can evict it.
    # Default: 90s
    lease-expiration-duration-in-seconds: 5

    # The cadence of lease renewal, i.e. how often a heartbeat is sent to Eureka server.
    # In this case every 2 seconds. Use this only for development / debugging. In production use the ...
    # Default: 30s
    lease-renewal-interval-in-seconds:    2
    metadata-map:
      config-protocol: http # The protocol used to access the config server
      username: ${spring.security.user.name}
      password: ${spring.security.user.password}
      protocol: ${oleap.srv.protocol}
      zone: ${oleap.eureka.zone}
    non-secure-port-enabled: true
    prefer-ip-address: true
    secure-port-enabled: false